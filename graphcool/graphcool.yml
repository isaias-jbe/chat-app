# Welcome to Graphcool!
#
# This file is the main config file for your Graphcool Service.
# It's very minimal at this point and uses default values.
# We've included a hello world function here.
# Just run `graphcool deploy` to have the first running Graphcool Service.
#
# Check out some examples:
#    https://github.com/graphcool/framework/tree/master/examples
#
# Here are the reference docs of this definition format:
# https://www.graph.cool/docs/reference/service-definition/graphcool.yml-foatho8aip
#
# Happy Coding!

# In the types.graphql you define your data schema
types: ./types.graphql

functions:
  # added by email-password template: (please uncomment)
  #
  signup:
    type: resolver
    schema: src/email-password/signup.graphql
    handler:
      code: src/email-password/signup.ts

  authenticate:
    type: resolver
    schema: src/email-password/authenticate.graphql
    handler:
      code: src/email-password/authenticate.ts

  loggedInUser:
    type: resolver
    schema: src/email-password/loggedInUser.graphql
    handler:
      code: src/email-password/loggedInUser.ts

# Model/Relation permissions are used to limit the API access
# To take the burden of thinking about those while development, we
# preconfigured the wildcard ("*") permission that allows everything
# Read more here:
# https://www.graph.cool/docs/reference/auth/authorization/overview-iegoo0heez
permissions:
  # Operations CRUD - read, create, update, delete
  # User - Operação de Autenticação e Cadastro de usuários
  # files (authenticate.ts, signup.ts)
  - operation: User.read
    fields: [id, password]
  - operation: User.create
    fields: [name, email, password]

  # User - Operação de read, update, delete type User quando Autenticados
  - operation: User.read
    authenticated: true
    query: src/permissions/User.graphql

  - operation: User.read
    fields: [name, email, photo, createdAt, updatedAt]
    authenticated: true

  - operation: User.update
    authenticated: true
    query: src/permissions/User.graphql
    # Regra para liberar o update da photo
  - operation: User.update
    fields: [photo]
    authenticated: true
  - operation: User.delete
    authenticated: true
    query: src/permissions/User.graphql

  # Chat - Operações read, create, update, delete type chat. Users Authenticates
  - operation: Chat.read
    authenticated: true
  - operation: Chat.create
    authenticated: true
  - operation: Chat.update
    authenticated: true
  - operation: Chat.delete
    authenticated: true

  # Message - Operações read, create, update, delete type Message. Users Authenticates
  - operation: Message.read
    authenticated: true
  - operation: Message.create
    authenticated: true
  - operation: Message.update
    authenticated: true
  - operation: Message.delete
    authenticated: true

  # File - Operações read, create, update, delete type File. Users Authenticates
  - operation: File.read
    authenticated: true
  - operation: File.create
    authenticated: true
  - operation: File.update
    authenticated: true
  - operation: File.delete
    authenticated: true

  # operations DB - connect, disconnect
  # Relation Users in Chats
  - operation: UsersOnChats.connect
    authenticated: true
  - operation: UsersOnChats.disconnect
    authenticated: true

  # Relation Messages in Chat
  - operation: MessagesOnChat.connect
    authenticated: true
  # - operation: MessagesOnChat.disconnect
  #   authenticated: true

  # Relation Messages in User
  - operation: MessagesOnUser.connect
    authenticated: true
  # - operation: MessagesOnUser.disconnect
  #   authenticated: true

  # Relation User in Photo
  - operation: UserPhoto.connect
    authenticated: true
  - operation: UserPhoto.disconnect
    authenticated: true

  # Relation Chat in Photo
  - operation: ChatPhoto.connect
    authenticated: true
  - operation: ChatPhoto.disconnect
    authenticated: true
# Your root tokens used for functions to get full access to the API
# Read more here:
# https://www.graph.cool/docs/reference/auth/authentication/authentication-tokens-eip7ahqu5o
# rootTokens:
#   - mytoken

